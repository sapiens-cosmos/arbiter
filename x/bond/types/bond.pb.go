// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arbiter/bond/v1beta/bond.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BondType int32

const (
	BondType_RESERVE   BondType = 0
	BondType_LIQUIDITY BondType = 1
)

var BondType_name = map[int32]string{
	0: "RESERVE",
	1: "LIQUIDITY",
}

var BondType_value = map[string]int32{
	"RESERVE":   0,
	"LIQUIDITY": 1,
}

func (x BondType) String() string {
	return proto.EnumName(BondType_name, int32(x))
}

func (BondType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_167fd413a1bcec04, []int{0}
}

type BondState struct {
	TotalDebt       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=total_debt,json=totalDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_debt" yaml:"total_debt"`
	LastDecayHeight int64                                  `protobuf:"varint,2,opt,name=last_decay_height,json=lastDecayHeight,proto3" json:"last_decay_height,omitempty" yaml:"last_decay_height"`
}

func (m *BondState) Reset()         { *m = BondState{} }
func (m *BondState) String() string { return proto.CompactTextString(m) }
func (*BondState) ProtoMessage()    {}
func (*BondState) Descriptor() ([]byte, []int) {
	return fileDescriptor_167fd413a1bcec04, []int{0}
}
func (m *BondState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondState.Merge(m, src)
}
func (m *BondState) XXX_Size() int {
	return m.Size()
}
func (m *BondState) XXX_DiscardUnknown() {
	xxx_messageInfo_BondState.DiscardUnknown(m)
}

var xxx_messageInfo_BondState proto.InternalMessageInfo

func (m *BondState) GetLastDecayHeight() int64 {
	if m != nil {
		return m.LastDecayHeight
	}
	return 0
}

type BondPolicy struct {
	BondType  BondType `protobuf:"varint,1,opt,name=bond_type,json=bondType,proto3,enum=arbiter.bond.v1beta1.BondType" json:"bond_type,omitempty" yaml:"bond_type"`
	BondDenom string   `protobuf:"bytes,2,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty" yaml:"bond_denom"`
	// BCV
	ControlVariable github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=control_variable,json=controlVariable,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"control_variable" yaml:"control_variable"`
	// vestingHeight represented in blocks
	VestingHeight int64 `protobuf:"varint,4,opt,name=vesting_height,json=vestingHeight,proto3" json:"vesting_height,omitempty" yaml:"vesting_height"`
}

func (m *BondPolicy) Reset()         { *m = BondPolicy{} }
func (m *BondPolicy) String() string { return proto.CompactTextString(m) }
func (*BondPolicy) ProtoMessage()    {}
func (*BondPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_167fd413a1bcec04, []int{1}
}
func (m *BondPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondPolicy.Merge(m, src)
}
func (m *BondPolicy) XXX_Size() int {
	return m.Size()
}
func (m *BondPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_BondPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_BondPolicy proto.InternalMessageInfo

func (m *BondPolicy) GetBondType() BondType {
	if m != nil {
		return m.BondType
	}
	return BondType_RESERVE
}

func (m *BondPolicy) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

func (m *BondPolicy) GetVestingHeight() int64 {
	if m != nil {
		return m.VestingHeight
	}
	return 0
}

type Debt struct {
	// # of tokens remaining to be paid
<<<<<<< HEAD
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"debt"`
=======
	Debt github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"varint,1,opt,name=debt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"debt" yaml:"debt"`
>>>>>>> master
	// blocks left for vesting
	RemainingHeight int64 `protobuf:"varint,2,opt,name=remaining_height,json=remainingHeight,proto3" json:"remaining_height,omitempty" yaml:"remaining_height"`
	// last interaction
	LastHeight int64 `protobuf:"varint,3,opt,name=last_height,json=lastHeight,proto3" json:"last_height,omitempty" yaml:"last_height"`
}

func (m *Debt) Reset()         { *m = Debt{} }
func (m *Debt) String() string { return proto.CompactTextString(m) }
func (*Debt) ProtoMessage()    {}
func (*Debt) Descriptor() ([]byte, []int) {
	return fileDescriptor_167fd413a1bcec04, []int{2}
}
func (m *Debt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Debt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Debt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Debt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Debt.Merge(m, src)
}
func (m *Debt) XXX_Size() int {
	return m.Size()
}
func (m *Debt) XXX_DiscardUnknown() {
	xxx_messageInfo_Debt.DiscardUnknown(m)
}

var xxx_messageInfo_Debt proto.InternalMessageInfo

func (m *Debt) GetRemainingHeight() int64 {
	if m != nil {
		return m.RemainingHeight
	}
	return 0
}

func (m *Debt) GetLastHeight() int64 {
	if m != nil {
		return m.LastHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("arbiter.bond.v1beta1.BondType", BondType_name, BondType_value)
	proto.RegisterType((*BondState)(nil), "arbiter.bond.v1beta1.BondState")
	proto.RegisterType((*BondPolicy)(nil), "arbiter.bond.v1beta1.BondPolicy")
	proto.RegisterType((*Debt)(nil), "arbiter.bond.v1beta1.Debt")
}

func init() { proto.RegisterFile("arbiter/bond/v1beta/bond.proto", fileDescriptor_167fd413a1bcec04) }

var fileDescriptor_167fd413a1bcec04 = []byte{
<<<<<<< HEAD
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xb5, 0xe2, 0x90, 0x2f, 0xba, 0x26, 0xb1, 0x33, 0x38, 0x5f, 0xdd, 0x1f, 0xa4, 0xa0, 0x45,
	0x08, 0x85, 0xc8, 0xa4, 0x2d, 0x14, 0x0a, 0x85, 0xa2, 0xda, 0xc5, 0x86, 0x2e, 0x1a, 0xe5, 0x07,
	0xda, 0x8d, 0x99, 0x91, 0x06, 0x59, 0x54, 0xd2, 0x18, 0x69, 0x62, 0xaa, 0xb7, 0xe8, 0xeb, 0xf4,
	0x0d, 0xb2, 0x29, 0x64, 0x59, 0xba, 0x10, 0xc5, 0x7e, 0x03, 0x3d, 0x41, 0xd1, 0xcc, 0x28, 0x76,
	0xd3, 0x6e, 0xb2, 0xd2, 0xe8, 0xdc, 0x7b, 0xcf, 0x3d, 0x73, 0xee, 0x5c, 0x30, 0x70, 0x4a, 0x42,
	0x4e, 0xd3, 0x3e, 0x61, 0x89, 0xdf, 0x9f, 0x9f, 0x10, 0xca, 0xb1, 0x38, 0xdb, 0xb3, 0x94, 0x71,
	0x86, 0xba, 0x2a, 0x6e, 0x0b, 0x4c, 0xc6, 0x4f, 0x1e, 0x75, 0x03, 0x16, 0x30, 0x91, 0xd0, 0xaf,
	0x4e, 0x32, 0xd7, 0xfa, 0xa6, 0x81, 0xee, 0xb0, 0xc4, 0x3f, 0xe3, 0x98, 0x53, 0x44, 0x00, 0x38,
	0xe3, 0x38, 0x9a, 0xf8, 0x94, 0xf0, 0x9e, 0x76, 0xa0, 0x1d, 0xe9, 0xce, 0xdb, 0xeb, 0xc2, 0x6c,
	0xfc, 0x2c, 0xcc, 0xc3, 0x20, 0xe4, 0xd3, 0x2b, 0x62, 0x7b, 0x2c, 0xee, 0x7b, 0x2c, 0x8b, 0x59,
	0xa6, 0x3e, 0xc7, 0x99, 0xff, 0xb9, 0xcf, 0xf3, 0x19, 0xcd, 0xec, 0x01, 0xf5, 0xca, 0xc2, 0xdc,
	0xcb, 0x71, 0x1c, 0xbd, 0xb2, 0x56, 0x4c, 0x96, 0xab, 0x8b, 0x9f, 0x01, 0x25, 0x1c, 0x8d, 0x60,
	0x2f, 0xc2, 0x19, 0x9f, 0xf8, 0xd4, 0xc3, 0xf9, 0x64, 0x4a, 0xc3, 0x60, 0xca, 0x7b, 0x1b, 0x07,
	0xda, 0x51, 0xd3, 0x79, 0x52, 0x16, 0x66, 0x4f, 0x16, 0xff, 0x95, 0x62, 0xb9, 0xed, 0x0a, 0x1b,
	0x54, 0xd0, 0x48, 0x22, 0xdf, 0x37, 0x00, 0x2a, 0xed, 0x1f, 0x58, 0x14, 0x7a, 0x39, 0x3a, 0x05,
	0xbd, 0xba, 0xf0, 0xa4, 0x92, 0x22, 0xb4, 0xef, 0x3e, 0x33, 0xec, 0x7f, 0x59, 0x61, 0x57, 0x45,
	0xe7, 0xf9, 0x8c, 0x3a, 0xdd, 0xb2, 0x30, 0x3b, 0xb2, 0xe1, 0x6d, 0xa9, 0xe5, 0x6e, 0x13, 0x15,
	0x47, 0x2f, 0x00, 0x04, 0xee, 0xd3, 0x84, 0xc5, 0x42, 0xa4, 0xee, 0xec, 0xaf, 0x6e, 0xb8, 0x8a,
	0x59, 0xae, 0xe8, 0x3d, 0xa8, 0xce, 0x88, 0x43, 0xc7, 0x63, 0x09, 0x4f, 0x59, 0x34, 0x99, 0xe3,
	0x34, 0xc4, 0x24, 0xa2, 0xbd, 0xa6, 0xa8, 0x1d, 0xdf, 0xdb, 0xcb, 0x07, 0xb2, 0xd3, 0x5d, 0x3e,
	0xcb, 0x6d, 0x2b, 0xe8, 0x52, 0x21, 0xe8, 0x0d, 0xec, 0xce, 0x69, 0xc6, 0xc3, 0x24, 0xa8, 0x4d,
	0xdd, 0x14, 0xa6, 0x3e, 0x2c, 0x0b, 0x73, 0x5f, 0xb2, 0xfc, 0x19, 0xb7, 0xdc, 0x1d, 0x05, 0x28,
	0x3f, 0x0b, 0x0d, 0x36, 0xc5, 0x88, 0x2e, 0x60, 0x0b, 0xc7, 0xec, 0x2a, 0xa9, 0x9f, 0xc0, 0xeb,
	0x7b, 0xc8, 0x1e, 0x27, 0xbc, 0x2c, 0xcc, 0x96, 0x6c, 0x28, 0x87, 0xaf, 0xc8, 0xd0, 0x3b, 0xe8,
	0xa4, 0x34, 0xc6, 0x61, 0xb2, 0xa6, 0x51, 0x0e, 0xfe, 0xf1, 0xea, 0xa6, 0x77, 0x33, 0x2c, 0xb7,
	0x7d, 0x0b, 0x49, 0x9d, 0xe8, 0x25, 0xb4, 0xc4, 0xf3, 0x50, 0x14, 0x4d, 0x41, 0xf1, 0x7f, 0x59,
	0x98, 0x68, 0xed, 0xed, 0xd4, 0xd5, 0x50, 0xfd, 0xc9, 0xc2, 0xa7, 0x87, 0xb0, 0x5d, 0x8f, 0x1e,
	0xb5, 0xe0, 0x3f, 0x77, 0x78, 0x36, 0x74, 0x2f, 0x87, 0x9d, 0x06, 0xda, 0x01, 0xfd, 0xfd, 0xf8,
	0xf4, 0x62, 0x3c, 0x18, 0x9f, 0x7f, 0xec, 0x68, 0xce, 0xe8, 0x7a, 0x61, 0x68, 0x37, 0x0b, 0x43,
	0xfb, 0xb5, 0x30, 0xb4, 0xaf, 0x4b, 0xa3, 0x71, 0xb3, 0x34, 0x1a, 0x3f, 0x96, 0x46, 0xe3, 0x93,
	0xbd, 0xe6, 0x40, 0x86, 0x67, 0x21, 0x4d, 0xb2, 0x63, 0xe5, 0x44, 0xbd, 0x94, 0x5f, 0xe4, 0x5a,
	0x0a, 0x37, 0xc8, 0x96, 0xd8, 0xb2, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x32, 0x3a,
	0x49, 0xb3, 0x03, 0x00, 0x00,
=======
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xb5, 0x62, 0xf3, 0x7d, 0xd1, 0x35, 0x89, 0x9d, 0xc1, 0x69, 0xdd, 0x1f, 0xa4, 0xa0, 0x45,
	0x08, 0x85, 0xc8, 0xa4, 0x2d, 0x14, 0x0a, 0x85, 0xa2, 0xda, 0xc5, 0x86, 0x2e, 0x6a, 0x25, 0x0d,
	0xb4, 0x1b, 0x33, 0x23, 0x0d, 0xb2, 0xa8, 0xa4, 0x31, 0xd2, 0xd4, 0x54, 0x6f, 0xd1, 0xd7, 0xe9,
	0x1b, 0x64, 0x53, 0xc8, 0xb2, 0x64, 0x21, 0x8a, 0xfd, 0x06, 0x7a, 0x82, 0x32, 0x33, 0xf2, 0x4f,
	0xd3, 0x6e, 0xb2, 0xd2, 0xe8, 0xdc, 0x7b, 0xcf, 0x3d, 0xf7, 0xcc, 0x5c, 0x30, 0x70, 0x4a, 0x42,
	0x4e, 0xd3, 0x1e, 0x61, 0x89, 0xdf, 0x9b, 0x9f, 0x11, 0xca, 0xb1, 0x3c, 0xdb, 0xb3, 0x94, 0x71,
	0x86, 0x3a, 0x55, 0xdc, 0x96, 0x98, 0x8a, 0x9f, 0x3d, 0xec, 0x04, 0x2c, 0x60, 0x32, 0xa1, 0x27,
	0x4e, 0x2a, 0xd7, 0xfa, 0xae, 0x81, 0xee, 0xb0, 0xc4, 0x3f, 0xe7, 0x98, 0x53, 0x44, 0x00, 0x38,
	0xe3, 0x38, 0x9a, 0xf8, 0x94, 0xf0, 0xae, 0x76, 0xa4, 0x9d, 0xe8, 0xce, 0x9b, 0xab, 0xc2, 0xac,
	0xdd, 0x14, 0xe6, 0x71, 0x10, 0xf2, 0xe9, 0x17, 0x62, 0x7b, 0x2c, 0xee, 0x79, 0x2c, 0x8b, 0x59,
	0x56, 0x7d, 0x4e, 0x33, 0xff, 0x73, 0x8f, 0xe7, 0x33, 0x9a, 0xd9, 0xa3, 0x84, 0x97, 0x85, 0x79,
	0x90, 0xe3, 0x38, 0x7a, 0x69, 0x6d, 0x98, 0x2c, 0x57, 0x97, 0x3f, 0x7d, 0x4a, 0x38, 0x1a, 0xc2,
	0x41, 0x84, 0x33, 0x3e, 0xf1, 0xa9, 0x87, 0xf3, 0xc9, 0x94, 0x86, 0xc1, 0x94, 0x77, 0x77, 0x8e,
	0xb4, 0x93, 0xba, 0xf3, 0xb8, 0x2c, 0xcc, 0xae, 0x2a, 0xfe, 0x2b, 0xc5, 0x72, 0x5b, 0x02, 0xeb,
	0x0b, 0x68, 0xa8, 0x90, 0x1f, 0x3b, 0x00, 0x42, 0xfb, 0x7b, 0x16, 0x85, 0x5e, 0x8e, 0xc6, 0xa0,
	0x8b, 0x81, 0x27, 0x42, 0x8a, 0xd4, 0xbe, 0xff, 0xd4, 0xb0, 0xff, 0x65, 0x85, 0x2d, 0x8a, 0x2e,
	0xf2, 0x19, 0x75, 0x3a, 0x65, 0x61, 0xb6, 0x55, 0xc3, 0x75, 0xa9, 0xe5, 0xee, 0x92, 0x2a, 0x8e,
	0x9e, 0x03, 0x48, 0xdc, 0xa7, 0x09, 0x8b, 0xa5, 0x48, 0xdd, 0x39, 0xdc, 0x4c, 0xb8, 0x89, 0x59,
	0xae, 0xec, 0xdd, 0x17, 0x67, 0xc4, 0xa1, 0xed, 0xb1, 0x84, 0xa7, 0x2c, 0x9a, 0xcc, 0x71, 0x1a,
	0x62, 0x12, 0xd1, 0x6e, 0x5d, 0xd6, 0x8e, 0xee, 0xe0, 0x65, 0x9f, 0x7a, 0x65, 0x61, 0xde, 0x57,
	0x9d, 0x6e, 0xf3, 0x59, 0x6e, 0xab, 0x82, 0x2e, 0x2b, 0x04, 0xbd, 0x86, 0xfd, 0x39, 0xcd, 0x78,
	0x98, 0x04, 0x2b, 0x53, 0x1b, 0xd2, 0xd4, 0x07, 0x65, 0x61, 0x1e, 0x2a, 0x96, 0x3f, 0xe3, 0x96,
	0xbb, 0x57, 0x01, 0x95, 0x9f, 0x37, 0x1a, 0x34, 0x84, 0x35, 0x68, 0x0c, 0x8d, 0xf5, 0x03, 0x68,
	0x38, 0xaf, 0xee, 0x2c, 0xba, 0xa9, 0xda, 0xa9, 0xab, 0x97, 0x54, 0xe8, 0x2d, 0xb4, 0x53, 0x1a,
	0xe3, 0x30, 0xd9, 0xd2, 0xa7, 0x2e, 0xfd, 0xd1, 0x66, 0xca, 0xdb, 0x19, 0x96, 0xdb, 0x5a, 0x43,
	0x4a, 0x23, 0x7a, 0x01, 0x4d, 0xf9, 0x34, 0x2a, 0x8a, 0xba, 0xa4, 0xb8, 0x57, 0x16, 0x26, 0xda,
	0x7a, 0x37, 0xab, 0x6a, 0x10, 0x7f, 0xaa, 0xf0, 0xc9, 0x31, 0xec, 0xae, 0xae, 0x1d, 0x35, 0xe1,
	0x7f, 0x77, 0x70, 0x3e, 0x70, 0x2f, 0x07, 0xed, 0x1a, 0xda, 0x03, 0xfd, 0xdd, 0x68, 0xfc, 0x61,
	0xd4, 0x1f, 0x5d, 0x7c, 0x6c, 0x6b, 0xce, 0xf0, 0x6a, 0x61, 0x68, 0xd7, 0x0b, 0x43, 0xfb, 0xb5,
	0x30, 0xb4, 0x6f, 0x4b, 0xa3, 0x76, 0xbd, 0x34, 0x6a, 0x3f, 0x97, 0x46, 0xed, 0x93, 0xbd, 0x35,
	0x7f, 0x86, 0x67, 0x21, 0x4d, 0xb2, 0xd3, 0xca, 0x87, 0xd5, 0x42, 0x7e, 0x55, 0x2b, 0x29, 0xbd,
	0x20, 0xff, 0xc9, 0x0d, 0x7b, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x00, 0x02, 0xf2, 0x97, 0xaf,
	0x03, 0x00, 0x00,
>>>>>>> master
}

func (m *BondState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastDecayHeight != 0 {
		i = encodeVarintBond(dAtA, i, uint64(m.LastDecayHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.TotalDebt.Size()
		i -= size
		if _, err := m.TotalDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBond(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BondPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingHeight != 0 {
		i = encodeVarintBond(dAtA, i, uint64(m.VestingHeight))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.ControlVariable.Size()
		i -= size
		if _, err := m.ControlVariable.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBond(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintBond(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.BondType != 0 {
		i = encodeVarintBond(dAtA, i, uint64(m.BondType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Debt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Debt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Debt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeight != 0 {
		i = encodeVarintBond(dAtA, i, uint64(m.LastHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.RemainingHeight != 0 {
		i = encodeVarintBond(dAtA, i, uint64(m.RemainingHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBond(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBond(dAtA []byte, offset int, v uint64) int {
	offset -= sovBond(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BondState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalDebt.Size()
	n += 1 + l + sovBond(uint64(l))
	if m.LastDecayHeight != 0 {
		n += 1 + sovBond(uint64(m.LastDecayHeight))
	}
	return n
}

func (m *BondPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondType != 0 {
		n += 1 + sovBond(uint64(m.BondType))
	}
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovBond(uint64(l))
	}
	l = m.ControlVariable.Size()
	n += 1 + l + sovBond(uint64(l))
	if m.VestingHeight != 0 {
		n += 1 + sovBond(uint64(m.VestingHeight))
	}
	return n
}

func (m *Debt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovBond(uint64(l))
	if m.RemainingHeight != 0 {
		n += 1 + sovBond(uint64(m.RemainingHeight))
	}
	if m.LastHeight != 0 {
		n += 1 + sovBond(uint64(m.LastHeight))
	}
	return n
}

func sovBond(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBond(x uint64) (n int) {
	return sovBond(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BondState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBond
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDecayHeight", wireType)
			}
			m.LastDecayHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDecayHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBond(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBond
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBond
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondType", wireType)
			}
			m.BondType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BondType |= BondType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlVariable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ControlVariable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingHeight", wireType)
			}
			m.VestingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBond(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBond
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Debt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBond
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Debt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Debt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
<<<<<<< HEAD
				stringLen |= uint64(b&0x7F) << shift
=======
				m.Debt |= github_com_cosmos_cosmos_sdk_types.Dec(b&0x7F) << shift
>>>>>>> master
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingHeight", wireType)
			}
			m.RemainingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeight", wireType)
			}
			m.LastHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBond(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBond
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBond(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBond
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBond
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBond
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBond
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBond
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBond
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBond        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBond          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBond = fmt.Errorf("proto: unexpected end of group")
)
